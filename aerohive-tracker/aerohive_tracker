#!/usr/bin/python3

import os,random,aeromiko,time,json,yaml,socket,sys,re
import paho.mqtt.client as mqtt_client
import paho.mqtt.publish as publish
from datetime import datetime
from operator import itemgetter
from pprint import pprint

def read_options():
  options={}
  for opt_file in ["/data/options.json","./options.json"]:
    try:
      print("getting options from "+opt_file)
      with open(opt_file, 'r') as f:
        options = json.load(f)
        break
      print(" options loaded from "+opt_file)
    except:
      print("      failed to open "+opt_file)

  options.setdefault('aerohive_host'       ,'')
  options.setdefault('aerohive_password'   ,'')
  options.setdefault('aerohive_username'   ,'admin')
  options.setdefault('preinit_macs'        ,'')
  options.setdefault('mqtt_topic'          ,'device_tracker/aerohive')
  options.setdefault('mqtt_host'           ,'localhost')
  options.setdefault('mqtt_password'       ,'')
  options.setdefault('mqtt_username'       ,'')
  options.setdefault('ignore_unnamed_hosts',True)
  options.setdefault('ignore_regex_mac'    ,'^$')
  options.setdefault('ignore_regex_ip'     ,'^$')
  options.setdefault('ignore_regex_name'   ,'^$')
  options.setdefault('sleep_interval'           ,30)
  options.setdefault('mqtt_port'              ,1883)
  options.setdefault('mqtt_first_reconnect_delay',1)
  options.setdefault('mqtt_reconnect_rate'       ,2)
  options.setdefault('mqtt_max_reconnect_count' ,12)
  options.setdefault('mqtt_max_reconnect_delay' ,60)
  for key in ['aerohive_host','aerohive_password']:
    if options[key]=='':
      print(key+" cannot be blank.  Terminating...")
      exit()
  return options
def create_discovery_record(topic, device):
    entity_config = {}
    entity_config['name'] = device['name']
    entity_config['unique_id'] = device['mac'].replace(":","")+"_aerohive_device_tracker"
    entity_config['state_topic'] = topic + '/0x'+device['mac'].replace(":","")+'/state' 
    entity_config['json_attributes_topic'] = topic + '/0x'+device['mac'].replace(":","")+'/attributes'
    entity_config['payload_home'] = 'home'
    entity_config['payload_not_home'] = 'not_home'
    entity_config['source_type'] = 'router'
    entity_config['device']={}
    entity_config['device']['identifiers']='Aerohive'
    entity_config['device']['name']='Aerohive'
    #entity_config['device']['connections']=['ap',device['ap']]
    entity_config['device_class']='device_tracker'
    entity_config['device']['manufacturer']='Aerohive'

    return json.dumps(entity_config)
def on_disconnect(client, userdata, rc):
    print("Disconnected with result code: "+str(rc))
    reconnect_count, reconnect_delay = 0, options['mqtt_first_reconnect_delay']
    while (options['mqtt_max_reconnect_count'] == 0) or (reconnect_count < options['mqtt_max_reconnect_count']):
        print("Reconnecting in "+str(reconnect_delay)+" seconds...")
        time.sleep(reconnect_delay)
        try:
            client.reconnect()
            print("Reconnected successfully!")
            return
        except Exception as err:
            print(str(err)+". Reconnect failed. Retrying...")

        reconnect_delay *= options['mqtt_reconnect_rate']
        reconnect_delay = min(reconnect_delay, options['mqtt_max_reconnect_delay'])
        reconnect_count += 1
    print("Reconnect failed after "+str(reconnect_count)+" attempts. Exiting...")
def connect_mqtt():
    def on_connect(client, userdata, flags, rc):
        if rc == 0:
            print("Connected to MQTT Broker!")
        else:
            print("Failed to connect, return code %d\n", rc)
    # Set Connecting Client ID
    client = mqtt_client.Client(client_id)
    client.username_pw_set(options['mqtt_username'], options['mqtt_password'])
    client.on_connect = on_connect
    client.on_disconnect = on_disconnect
    client.connect(options["mqtt_host"], options["mqtt_port"] )
    return client
def publish(client,d):
  # public device payload and discovery payload for a device
  global discovery_published

  # always publich home/not_home status for all devices seen since startup
  # this is not retained
  result = client.publish(
      f"{topic}/0x{d['mac'].replace(':','')}/state",
      d['state'],
      retain=0,qos=0)
      
  if d['state']=="home":
    # only publish device payload when device is home
    # this is retained so you can tell the last AP a device connected to
    payload=json.dumps(d)
    result = client.publish(
      f"{topic}/0x{d['mac'].replace(':','')}/attributes",
      payload,
      retain=1,qos=0)

    # remove highly volitile keys from payload in discovery record
    d2=d.copy()
    d2.pop('lastseen',None)
    payload=json.dumps(d2)

    # publish the discovery record only when device payload changes
    # this is retained so homeassistant always remembers the device
    if (discovery_published.get(d['mac']) is None) or (discovery_published[d['mac']] != payload):
      discovery_topic="homeassistant/"+topic+"/0x"+d['mac'].replace(":","")+"/config"
      result = client.publish(
        discovery_topic,create_discovery_record(topic,d),retain=1,qos=0)
      discovery_published[d['mac']]=payload
    # result: [0, 1]
    #status = result[0]
    #if status == 0:
    #    print(f"Send home to topic {topic}/{mac}")
    #else:
    #    print(f"Failed to send message to topic {topic}")  
def scan_devices():
        global last_results
        """Scan for new devices and return a list with found device IDs."""
        result = _get_update()
        if result:
            last_results = sorted(list(result.values()),key=itemgetter('ip'))
        return last_results
def get_device_name(device):
        global last_results
        """Return the name of the given device or None if we don't know."""
        try:
          return last_results[device]['name']
        except:
          return None
def _connect():
        """ Connect to the Aerohive AP SSH server. """
        """ Support comma separated list of hosts, a thread will be created """
        """ for each AP. All APs assumed to be part of the same hive, """
        """ therefore use same user/pass """
        for host in aerohive_hosts:
          try:
            print("establishing ssh connection to ap "+host)
            aps[host]=aeromiko.AP(host, options['aerohive_username'], options['aerohive_password'])
            if aps[host].connect() == None:
              print("ssh connection to "+host+" failed.")
              connected[host] = False
            else:
              connected[host] = True
          except:
            print("ssh connection to "+host+" failed.")
            #aps[host].disconnect()
            aps[host]=None
            connected[host] = False
def _get_update():

        results = last_results
        for key in list(results.keys()):
          results[key]['state']='not_home'
        for host in aerohive_hosts: # For each host
          print("scanning ap "+host)
          try:
            ap_hostname=socket.gethostbyaddr(host)[0]
          except:
            ap_hostname=host
          if not connected[host]: # If not already connected
            _connect() # Attempt to connect
          if not connected[host]: # otherwise
            return None # skip host and continue with next host 
          for station in aps[host].show_station(): # for each wireless stations connected to AP
            ip     = station['IP_ADDR' ] # record ip and mac
            if ip != '0.0.0.0':
              octets = station['MAC_ADDR']
              mac    = octets[0:2]+':'+octets[2:7]+':'+octets[7:12]+':'+octets[12:14]
              try:
                """Return only up to the first dot, unless returned name is the IP"""
                hostname=socket.gethostbyaddr(ip)[0] # Try and resolve hostname 
                if hostname != ip:
                  hostname=hostname.split('.')[0] # store resolved hostname in record
              except:
                hostname=None # hostname could not be resolved from IP
              """Store the mac and associated hostname in the result"""  
              if hostname != ip:
                results[mac]={ 'name':hostname }
                results[mac]['ip']=ip
                results[mac]['ap']=ap_hostname
                results[mac]['mac']=mac
                results[mac]['state']='home'
                results[max]['lastseen']=int(datetime.now().timestamp())
        return results
def update_mqtt(client,devices):
  for device in devices:
    ignore=False
    try:
      if (re.match(ignore_regex_mac,device['mac']) or
          re.match(ignore_regex_name,device['name']) or
          re.match(ignore_regex_ip,device['ip'])):
        ignore=True
    except:
      ignore=False
    if ignore:
      break
    publish(client,device)
def task():
  global scanned_devices
  print("Opening connection to mqtt broker "+options["mqtt_host"]+":"+str(options["mqtt_port"]))
  try:
    client = connect_mqtt()
    client.loop_start()
  except:
    print("Failed to connect to mqtt broker "+options["mqtt_host"]+":"+str(options["mqtt_port"])+".  Exiting...")
    return
  print("Established connection to mqtt broker "+options["mqtt_host"]+":"+str(options["mqtt_port"]))
  for host in aerohive_hosts: # initialize conncted stats
    connected[host]=False
  _connect() # connect to all APs
  while True:
    try:
      scanned_devices=scan_devices()
      update_mqtt(client,scanned_devices)
    except:
      print("failed update loop.")
    print("Sleeping for "+str(options['sleep_interval'])+" seconds.")
    time.sleep(options['sleep_interval'])

options            = read_options()
aerohive_hosts     = options['aerohive_host'].split(',')
ignore_regex_mac   = re.compile(options['ignore_regex_mac' ])
ignore_regex_ip    = re.compile(options['ignore_regex_ip'  ])
ignore_regex_name  = re.compile(options['ignore_regex_name'])
aps                = {} # keys=mac, values=AP
connected          = {} # keys=mac, values=boolean
client_id          = f'python-mqtt-{random.randint(0, 1000)}'
scanned_devices    = {}
discovery_published= {}
last_results       = {}
for mac in options['preinit_macs'].split(','):
  last_results[mac]={
    "mac":mac,
    "state":"not_home",
    "name":"unknown",
    "ip":"unknown",
    "ap":"unknown"
  }

task()